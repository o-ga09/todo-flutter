// Mocks generated by Mockito 5.4.2 from annotations
// in todo_app/test/gateway/gateway_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:todo_app/driver/tododriver.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDriverTask_0 extends _i1.SmartFake implements _i2.DriverTask {
  _FakeDriverTask_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDriverMsg_1 extends _i1.SmartFake implements _i2.DriverMsg {
  _FakeDriverMsg_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TodoDriver].
///
/// See the documentation for Mockito's code generation for more information.
class MockTodoDriver extends _i1.Mock implements _i2.TodoDriver {
  @override
  _i3.Future<List<_i2.DriverTask>> getAll() => (super.noSuchMethod(
        Invocation.method(
          #getAll,
          [],
        ),
        returnValue: _i3.Future<List<_i2.DriverTask>>.value(<_i2.DriverTask>[]),
        returnValueForMissingStub:
            _i3.Future<List<_i2.DriverTask>>.value(<_i2.DriverTask>[]),
      ) as _i3.Future<List<_i2.DriverTask>>);
  @override
  _i3.Future<_i2.DriverTask> getById(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getById,
          [id],
        ),
        returnValue: _i3.Future<_i2.DriverTask>.value(_FakeDriverTask_0(
          this,
          Invocation.method(
            #getById,
            [id],
          ),
        )),
        returnValueForMissingStub:
            _i3.Future<_i2.DriverTask>.value(_FakeDriverTask_0(
          this,
          Invocation.method(
            #getById,
            [id],
          ),
        )),
      ) as _i3.Future<_i2.DriverTask>);
  @override
  _i3.Future<_i2.DriverMsg> create(_i2.DriverEdit? data) => (super.noSuchMethod(
        Invocation.method(
          #create,
          [data],
        ),
        returnValue: _i3.Future<_i2.DriverMsg>.value(_FakeDriverMsg_1(
          this,
          Invocation.method(
            #create,
            [data],
          ),
        )),
        returnValueForMissingStub:
            _i3.Future<_i2.DriverMsg>.value(_FakeDriverMsg_1(
          this,
          Invocation.method(
            #create,
            [data],
          ),
        )),
      ) as _i3.Future<_i2.DriverMsg>);
  @override
  _i3.Future<_i2.DriverMsg> update(
    int? id,
    _i2.DriverEdit? data,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #update,
          [
            id,
            data,
          ],
        ),
        returnValue: _i3.Future<_i2.DriverMsg>.value(_FakeDriverMsg_1(
          this,
          Invocation.method(
            #update,
            [
              id,
              data,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i3.Future<_i2.DriverMsg>.value(_FakeDriverMsg_1(
          this,
          Invocation.method(
            #update,
            [
              id,
              data,
            ],
          ),
        )),
      ) as _i3.Future<_i2.DriverMsg>);
  @override
  _i3.Future<_i2.DriverMsg> delete(int? id) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [id],
        ),
        returnValue: _i3.Future<_i2.DriverMsg>.value(_FakeDriverMsg_1(
          this,
          Invocation.method(
            #delete,
            [id],
          ),
        )),
        returnValueForMissingStub:
            _i3.Future<_i2.DriverMsg>.value(_FakeDriverMsg_1(
          this,
          Invocation.method(
            #delete,
            [id],
          ),
        )),
      ) as _i3.Future<_i2.DriverMsg>);
}
